#pragma once

#include "Haketon/Scene/Entity.h"
#include <rttr/type>
#include <functional>
#include <vector>
#include <string>

namespace Haketon
{
    // Component registry information for automatic UI generation
    struct ComponentInfo
    {
        rttr::type type;
        std::string displayName;
        bool isRemovable;
        std::function<bool(Entity)> hasComponent;
        std::function<void(Entity)> addComponent;
        std::function<void(Entity, bool)> drawSection;
    };
    
    // Initialize the component registry (called by SceneHierarchyPanel)
    void InitializeComponentRegistry(const std::vector<ComponentInfo>& registry);
    
    // Auto-generated component registry initialization (generated by HeaderTool)
    void InitializeGeneratedComponentRegistry();
    
    // Get the component registry for automatic UI generation
    const std::vector<ComponentInfo>& GetComponentRegistry();
    
    // Check if registry is initialized
    bool IsComponentRegistryInitialized();
    
    // Get all component types from reflection
    std::vector<rttr::type> GetAllComponentTypesFromReflection();
}